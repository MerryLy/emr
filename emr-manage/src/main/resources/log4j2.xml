<?xml version="1.0" encoding="UTF-8"?>
<!--https://blog.csdn.net/RyanDon/article/details/82589989 -->
<Configuration
        status="WARN"><!--status的值有 “trace”, “debug”, “info”, “warn”, “error” and “fatal”，用于控制log4j2日志框架本身的日志级别，如果将stratus设置为较低的级别就会看到很多关于log4j2本身的日志，如加载log4j2配置文件的路径等信息 -->
    <properties>
        <property name="LOG_HOME">/logs/tomcat/emr</property>
        <property name="FILE_NAME">emr-manage</property>
        <property name="log.sql.level">info</property>
    </properties>


    <Appenders><!--输出源，用于定义日志输出的地方log4j2支持的输出源有很多，有控制台Console、文件File、RollingRandomAccessFile、MongoDB、Flume 等-->
        <Console name="Console" target="SYSTEM_OUT"><!--控制台输出源是将日志打印到控制台上，开发的时候一般都会配置，以便调试-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %l - %msg%n"/>
        </Console>
        <!--该输出源也是写入到文件，不同的是比File更加强大，可以指定当文件达到一定大小（如20MB）时，另起一个文件继续写入日志，另起一个文件就涉及到新文件的名字命名规则，因此需要配置文件命名规则
        这种方式更加实用，因为你不可能一直往一个文件中写，如果一直写，文件过大，打开就会卡死，也不便于查找日志。fileName 指定当前日志文件的位置和文件名称filePattern 指定当发生Rolling时，文件的转移和重命名规则-->
        <RollingRandomAccessFile name="RollingRandomAccessFile" fileName="${LOG_HOME}/${FILE_NAME}.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %l - %msg%n"/><!--指定输出文件的格式-->
            <Policies>
                <!--TimeBasedTriggeringPolicy指定的size是1，这个配置需要和filePattern结合使用，结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件-->
                <!--<TimeBasedTriggeringPolicy interval="1"/>-->
                <SizeBasedTriggeringPolicy size="10 MB"/><!--指定当文件体积大于size指定的值时，触发Rolling-->
            </Policies>
            <DefaultRolloverStrategy max="10">
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <IfFileName glob="*.log"/>
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy><!--指定最多保存的文件个数-->
        </RollingRandomAccessFile>
    </Appenders>

    <Loggers><!--日志器日志器分根日志器Root和自定义日志器，当根据日志名字获取不到指定的日志器时就使用Root作为默认的日志器，自定义时需要指定每个Logger的名称name（对于命名可以以包名作为日志的名字，不同的包配置不同的级别等），
                日志级别level，相加性additivity（是否继承下面配置的日志器）， 对于一般的日志器（如Console、File、RollingRandomAccessFile）一般需要配置一个或多个输出源AppenderRef；-->
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingRandomAccessFile"/>
        </Root>
        <!--每个logger可以指定一个level（TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF），不指定时level默认为ERROR additivity指定是否同时输出log到父类的appender，缺省为true。-->
        <!--<Logger name="rollingRandomAccessFileLogger" level="trace" additivity="false">
            <AppenderRef ref="RollingRandomAccessFile" />
        </Logger>-->
        <!--<Logger name="com.emr.mapper" level="${log.sql.level}" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>-->
    </Loggers>
</Configuration>